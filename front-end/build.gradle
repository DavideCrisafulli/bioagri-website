/*
 * MIT License
 *
 * Copyright (c) 2020 BioAgri S.r.l.s.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os


plugins {
    id 'idea'
    id 'base'
}

group 'it.bioagri'
version '0.0.1'


repositories {
    mavenCentral()
}

dependencies {

}



task sass {

    group = 'sass'
    description = 'Build .scss files'

    doLast {

        Process p1, p2;

        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            p1 = Runtime.runtime.exec('cmd.exe npm install', null, rootProject.projectDir);
            p2 = Runtime.runtime.exec('cmd.exe npm run sass', null, rootProject.projectDir);
        } else {
            p1 = Runtime.runtime.exec('npm install', null, rootProject.projectDir);
            p2 = Runtime.runtime.exec('npm run sass', null, rootProject.projectDir);
        }

        new BufferedReader(new InputStreamReader(p1.getErrorStream()))
                .readLines()
                .forEach({ i -> System.err.println(i) });

        new BufferedReader(new InputStreamReader(p2.getErrorStream()))
                .readLines()
                .forEach({ i -> System.err.println(i) });

    }

    outputs.upToDateWhen { false }

}

task watch {

    group = 'sass'
    description = 'Watch .scss changes'

    doLast {

        Process p1, p2;

        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            p1 = Runtime.runtime.exec('cmd.exe npm install', null, rootProject.projectDir);
            p2 = Runtime.runtime.exec('cmd.exe npm run sass-watch', null, rootProject.projectDir);
        } else {
            p1 = Runtime.runtime.exec('npm install', null, rootProject.projectDir);
            p2 = Runtime.runtime.exec('npm run sass-watch', null, rootProject.projectDir);
        }

        new BufferedReader(new InputStreamReader(p1.getErrorStream()))
                .readLines()
                .forEach({ i -> System.err.println(i) });

        new BufferedReader(new InputStreamReader(p2.getErrorStream()))
                .readLines()
                .forEach({ i -> System.err.println(i) });

    }

    outputs.upToDateWhen { false }

}



task run(type: Sync) {

    group = 'webapp'
    description = 'Run webapp'


    includeEmptyDirs = false

    from('src/main/webapp') {
        exclude '**/*.scss'
    }

    into "${project(":back-end").projectDir}/src/main/webapp"

}

run.finalizedBy(project(":front-end").tasks.sass)
run.finalizedBy(project(":back-end").tasks.bootRun)