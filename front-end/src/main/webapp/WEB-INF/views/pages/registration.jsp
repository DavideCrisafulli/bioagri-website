<%@ page import="it.bioagri.api.auth.AuthToken" %><%--
  ~ MIT License
  ~
  ~ Copyright (c) 2020 BioAgri S.r.l.s.
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  ~
  --%>

<%--@elvariable id="components" type="java.util.Map"--%>
<%--@elvariable id="locale" type="java.util.Map"--%>
<%--@elvariable id="reference" type="java.lang.String"--%>
<%--@elvariable id="authToken" type="it.bioagri.api.auth.authToken"--%>



<section id="ui-navigation-container" ui-title="${locale.page_registration} &ndash; ${locale.info_title}">

    <canvas style="position:absolute; top: 0; left: 0; height: 100vh; " id='c'></canvas>

    <!-- Dependencies -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <script src="https://anuraghazra.github.io/ShaderExpo/js/helpers.js"></script>
    <script src="https://anuraghazra.github.io/ShaderExpo/js/utils.js"></script>
    <script src="https://anuraghazra.github.io/ShaderExpo/js/Camera.js"></script>
    <script src="https://anuraghazra.github.io/ShaderExpo/js/Shader.js"></script>
    <script src="https://anuraghazra.github.io/ShaderExpo/js/RawModel.js"></script>
    <script src="https://anuraghazra.github.io/ShaderExpo/js/Mesh.js"></script>


    <script>
        /**
         * @Author <https://github.com/anuraghazra>
         * This file is automatically generated.
         * if you have any issues please contact at
         * <https://github.com/anuraghazra/ShaderExpo>
         */
        window.onload = function () {
            // Shader Code
            const vertexShaderValue = `// Vertex Shader
precision mediump float;
attribute vec3 aVertexPos;

void main() {
  gl_Position = vec4(aVertexPos, 1.0);
}
`;
            const fragmentShaderValue = `precision mediump float;

uniform float uTime;
uniform vec2 mouse;
uniform vec2 resolution;

/*
 * "Seascape" by Alexander Alekseev aka TDM - 2014
 * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
 * Contact: tdmaav@gmail.com
 */

const int NUM_STEPS = 8;
const float PI	 	= 3.141592;
const float EPSILON	= 1e-3;
#define EPSILON_NRM (0.1 / resolution.x)

// sea
const int ITER_GEOMETRY = 3;
const int ITER_FRAGMENT = 5;
const float SEA_HEIGHT = 0.6;
const float SEA_CHOPPY = 4.0;
const float SEA_SPEED = 0.8;
const float SEA_FREQ = 0.16;
const vec3 SEA_BASE = vec3(0.1,0.19,0.22);
const vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6);
#define SEA_TIME (1.0 + uTime * SEA_SPEED)
const mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);

// math
mat3 fromEuler(vec3 ang) {
	vec2 a1 = vec2(sin(ang.x),cos(ang.x));
    vec2 a2 = vec2(sin(ang.y),cos(ang.y));
    vec2 a3 = vec2(sin(ang.z),cos(ang.z));
    mat3 m;
    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);
	m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);
	m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);
	return m;
}
float hash( vec2 p ) {
	float h = dot(p,vec2(127.1,311.7));
    return fract(sin(h)*43758.5453123);
}
float noise( in vec2 p ) {
    vec2 i = floor( p );
    vec2 f = fract( p );
	vec2 u = f*f*(3.0-2.0*f);
    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ),
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ),
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}

// lighting
float diffuse(vec3 n,vec3 l,float p) {
    return pow(dot(n,l) * 0.4 + 0.6,p);
}
float specular(vec3 n,vec3 l,vec3 e,float s) {
    float nrm = (s + 8.0) / (PI * 8.0);
    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;
}

// sky
vec3 getSkyColor(vec3 e) {
    e.y = max(e.y,0.0);
    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4);
}

// sea
float sea_octave(vec2 uv, float choppy) {
    uv += noise(uv);
    vec2 wv = 1.0-abs(sin(uv));
    vec2 swv = abs(cos(uv));
    wv = mix(wv,swv,wv);
    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);
}

float map(vec3 p) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    vec2 uv = p.xz; uv.x *= 0.75;

    float d, h = 0.0;
    for(int i = 0; i < ITER_GEOMETRY; i++) {
    	d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	d += sea_octave((uv-SEA_TIME)*freq,choppy);
        h += d * amp;
    	uv *= octave_m; freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy,1.0,0.2);
    }
    return p.y - h;
}

float map_detailed(vec3 p) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    vec2 uv = p.xz; uv.x *= 0.75;

    float d, h = 0.0;
    for(int i = 0; i < ITER_FRAGMENT; i++) {
    	d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	d += sea_octave((uv-SEA_TIME)*freq,choppy);
        h += d * amp;
    	uv *= octave_m; freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy,1.0,0.2);
    }
    return p.y - h;
}

vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {
    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);
    fresnel = pow(fresnel,3.0) * 0.65;

    vec3 reflected = getSkyColor(reflect(eye,n));
    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 1.12;

    vec3 color = mix(refracted,reflected,fresnel);

    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);
    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;

    color += vec3(specular(n,l,eye,60.0));

    return color;
}

// tracing
vec3 getNormal(vec3 p, float eps) {
    vec3 n;
    n.y = map_detailed(p);
    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;
    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;
    n.y = eps;
    return normalize(n);
}

float heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {
    float tm = 0.0;
    float tx = 1000.0;
    float hx = map(ori + dir * tx);
    if(hx > 0.0) return tx;
    float hm = map(ori + dir * tm);
    float tmid = 0.0;
    for(int i = 0; i < NUM_STEPS; i++) {
        tmid = mix(tm,tx, hm/(hm-hx));
        p = ori + dir * tmid;
    	float hmid = map(p);
		if(hmid < 0.0) {
        	tx = tmid;
            hx = hmid;
        } else {
            tm = tmid;
            hm = hmid;
        }
    }
    return tmid;
}

// main
void main( void ) {
	vec2 uv = gl_FragCoord.xy / resolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= resolution.x / resolution.y;
    float time = uTime * 0.3 + mouse.x*0.01;

    // ray
    vec3 ang = vec3(sin(time)*0.1,sin(time)*0.2+0.3,time);
    vec3 ori = vec3(0.0,3.5,time*5.0);
    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.15;
    dir = normalize(dir) * fromEuler(ang);

    // tracing
    vec3 p;
    heightMapTracing(ori,dir,p);
    vec3 dist = p - ori;
    vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);
    vec3 light = normalize(vec3(0.0,1.0,0.8));

    // color
    vec3 color = mix(
        getSkyColor(dir),
        getSeaColor(p,n,light,dir,dist),
    	pow(smoothstep(0.0,-0.05,dir.y),0.3));

    // post
	gl_FragColor = vec4(pow(color,vec3(0.75)), 1.0);
}`;

            // init gl
            const glcanvas = document.getElementById('c');
            const gl = glcanvas.getContext('webgl');
            const width = window.innerWidth;
            const height = window.innerHeight;
            glcanvas.width = width;
            glcanvas.height = height;

            let image = loadImage('https://anuraghazra.github.io/ShaderExpo/assets/textures/wood.jpg', main);

            // Main Run
            function main() {

                // GL CLEAR -----------
                gl.clearColor(0.0, 0.0, 0.0, 1.0);
                gl.clear(gl.COLOR_BUFFER_BIT);
                gl.enable(gl.DEPTH_TEST);
                gl.depthFunc(gl.LEQUAL);
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);


                // INTIALIZE VARIABLES
                let timeStart = Date.now() / 1000.0; // time
                let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
                let camera = new Camera([0, 0, -8], aspect);


                // init texture
                let texture = gl.createTexture();
                renderTexture(gl, texture, image);

                // init mesh
                let mesh = new Mesh(gl);
                mesh.initBuffers();

                // init shader
                let shader = new Shader(gl);

                // init matrices
                let worldMatrix = mat4.create();
                let viewMatrix = mat4.create();
                let projMatrix = mat4.create();
                function setMatrices() {
                    gl.uniformMatrix4fv(shader.uniforms.uWorldMatrix, false, worldMatrix);
                    gl.uniformMatrix4fv(shader.uniforms.uViewMatrix, false, viewMatrix);
                    gl.uniformMatrix4fv(shader.uniforms.uProjMatrix, false, projMatrix);
                }


                function compile() {
                    // create, compile, check shaders
                    shader.setShaders(vertexShaderValue, fragmentShaderValue);
                    shader.init();
                    if (shader.isVertexShaderError || shader.isFragmentShaderError) {
                        return false;
                    };

                    shader.getShaderVariables();
                    gl.useProgram(shader.program);

                    // bind buffer
                    mesh.enableAttribs(shader.attribs.aVertexPos, shader.attribs.aNormal, shader.attribs.aTexCoord);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.buffers.indices);

                    // init and set matrices
                    camera.lookAt(viewMatrix).perspective(projMatrix);

                    gl.uniform2fv(shader.uniforms.resolution, [gl.canvas.width, gl.canvas.height]);
                }

                compile();
                animate();
                function animate() {
                    gl.clearColor(0, 0, 0, 1.0);
                    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

                    // camera position
                    gl.uniform3fv(shader.uniforms.viewPos, camera.position);
                    gl.uniform1f(shader.uniforms.uTime, (Date.now() / 1000.0) - timeStart);

                    // mat4.identity(worldMatrix);
                    mat4.rotate(worldMatrix, worldMatrix, 0.01, [0, 1, 0]);
                    mat4.rotate(worldMatrix, worldMatrix, 0.01, [-1, 0, 0]);

                    // init and set matrices
                    setMatrices();
                    gl.drawElements(gl.TRIANGLES, mesh.indicesCount, gl.UNSIGNED_SHORT, 0);
                    requestAnimationFrame(animate);
                }
            }
        }
    </script>

    <!-- Header -->
    <ui-header id="ui-header"></ui-header>

    <!-- Navigation Bar -->
    <ui-navbar id="ui-navbar" ui:current="home"></ui-navbar>


    <section ui-animated>

        <!-- Page Header -->
        <ui-parallax id="ui-parallax-registration-header" ui:src="/assets/img/about/header.jpg" ui:reserve="300px">
            <div class="ui-container">
                <div class="row">
                    <div class="col-12 ui-about-header">
                        <h1 class="display-6 p-3">${locale.page_registration}</h1>
                    </div>
                </div>
            </div>
        </ui-parallax>


        <br>
        <br>
        <br>
        <br>

        <div class="ui-container">
            <div class="bg-light shadow border w-50 w-lg-100 mx-auto my-5" ui-animated="backInUp">
                <div class="my-5">

                    <!-- Registration Logo -->
                    <div class="d-flex justify-content-center pt-4">
                        <img src="${ locale.nav_logo }" width="64" height="64" />
                    </div>

                    <!-- Registration Slogan -->
                    <h4 class="text-center display-6">${ locale.registration_slogan_title }</h4>
                    <p class="text-center display-7">${ locale.registration_slogan_subtitle }</p>

                    <div class="p-5">

                        <!-- Registration Form -->
                        <ui-registration id="ui-registration"></ui-registration>

                        <!-- Other Access -->
                        <div class="d-flex justify-content-center">
                            <ul class="list-unstyled">

                                <li>
                                    <h6 class="text-center display-8 pb-3">${ locale.registration_body }</h6>
                                </li>

                                <!-- Google -->
                                <li>
                                    <button type="button" class="btn btn-primary" onclick="googleAuthenticate('ui-registration')">Accedi con Google</button>
                                </li>

                                <!-- Facebook -->

                                <!-- Instagram -->

                            </ul>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <br>
        <br>
        <br>
        <br>

    </section>

    <!-- Footer -->
    <ui-footer id="ui-footer" ui:current="home"> </ui-footer>

</section>




