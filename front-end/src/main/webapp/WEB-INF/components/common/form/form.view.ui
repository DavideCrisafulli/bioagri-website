<!--
  ~ MIT License
  ~
  ~ Copyright (c) 2020 BioAgri S.r.l.s.
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  ~
  -->


<?

    const getprops = (v) => {

        const output = [];

        if(v.required)
            output.push('required');

        if(v.minlength)
            output.push('minlength=' + v.minlength);

        if(v.maxlength)
            output.push('maxlength=' + v.maxlength);

        if(v.min)
            output.push('min=' + v.min);

        if(v.max)
            output.push('max=' + v.max);

        if(v.pattern)
            output.push('pattern="' + v.pattern.toString().slice(1, -1) + '"');

        if(v.placeholder)
            output.push('placeholder="' + v.placeholder + '"');

        if(v.size)
            output.push('size=' + v.size);

        return output.join(' ');

    };

    const wrong = (k) => {

        if($state !== 'wrong')
            return '';

        if($reason === undefined)
            return '';

        return $reason.includes(k)
            ? 'is-invalid'
            : '';

    }

?>

<div>

    <? if ($state === 'ok') { ?>

        {{ this.innerHTML }}

    <? } else if($state === 'error') { ?>

        <h2>Si Ã¨ verificato un errore {{$reason}}</h2>

    <? } else if($state === 'working') { ?>

        <div class="d-inline-block w-100 h-100" ui-animated>
            <div class="d-grid align-items-center h-100">
                <div class="spinner-grow m-auto" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>

    <? } else { ?>

        <form id="{{this.id}}-form" name="{{this.id}}-form">

            <?

                for(let k of Object.keys(this.state)) {

                    if(k.startsWith('$'))
                        continue;

                    const v = this.state[k];

                    switch(v.type) {

                        case 'text':
                        case 'tel':
                        case 'email':
                        case 'password':

                        ?>

                             <div>
                                 <label for="{{k}}" class="form-label">{{v.label || ''}}</label>
                                 <input type="{{v.type || 'text'}}" class="form-control {{wrong(k)}}" id="{{k}}" {{getprops(v)}} oninput="$$.$check(this)">
                                 <? if(wrong(k)) { ?>
                                 <?     if(v.wrong) { ?> <div class="invalid-feedback">{{v.wrong}}</div><? } ?>
                                 <? } else { ?>
                                 <?     if(v.ok)    { ?> <div class="valid-feedback">{{v.ok}}</div>     <? } ?>
                                 <?     if(v.error) { ?> <div class="invalid-feedback">{{v.error}}</div><? } ?>
                                 <? } ?>
                             </div>

                        <?

                            break;

                        case 'checkbox':
                        case 'switch':
                        case 'radio':

            ?>
                            <div class="form-check {{v.type === 'switch' ? 'form-switch' : ''}}">
                                <input type="{{v.type === 'radio' ? 'radio' : 'checkbox'}}" class="form-check-input {{wrong(k)}}" value="" id="{{k}}" {{getprops(v)}} oninput="$$.$check(this)">
                                <label class="form-check-label" for="{{k}}">{{v.label || ''}}</label>
                                <? if(wrong(k)) { ?>
                                <?     if(v.wrong) { ?> <div class="invalid-feedback">{{v.wrong}}</div><? } ?>
                                <? } else { ?>
                                <?     if(v.ok)    { ?> <div class="valid-feedback">{{v.ok}}</div>     <? } ?>
                                <?     if(v.error) { ?> <div class="invalid-feedback">{{v.error}}</div><? } ?>
                                <? } ?>
                            </div>
            <?

                            break;


                        default:
                            break;

                    }

                }
            ?>


            <div class="{{ submitPosition === 'center' ? 'd-flex justify-content-center' : '' }}">
                <button id="{{this.id}}-form-submit" type="submit" class="btn btn-primary mb-3" onclick="$$.$submit(this, event)" disabled>{{$submit}}</button>
            </div>

        </form>

    <? } ?>
</div>